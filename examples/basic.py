"""–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FastCacheMiddleware —Å —Ä–µ–∑–æ–ª—é—Ü–∏–µ–π —Ä–æ—É—Ç–æ–≤.

–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
1. –ê–Ω–∞–ª–∏–∑ —Ä–æ—É—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–µ—à –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π –∏–∑ dependencies
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–æ–≤
4. –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–µ—à–∞ –ø—Ä–∏ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
"""

import asyncio
import logging
import time
import typing as tp

import uvicorn
from fastapi import FastAPI, HTTPException, Request
from pydantic import BaseModel, Field
from starlette.responses import JSONResponse

from fast_cache_middleware import CacheConfig, CacheDropConfig, FastCacheMiddleware

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="FastCacheMiddleware Basic Example")

# –î–æ–±–∞–≤–ª—è–µ–º middleware - –æ–Ω –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–æ—É—Ç—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ
app.add_middleware(FastCacheMiddleware)


def custom_key_func(request: Request) -> str:
    # –ö–ª—é—á –≤–∫–ª—é—á–∞–µ—Ç user-id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
    user_id = request.headers.get("user-id", "anonymous")
    return f"{request.url.path}:user:{user_id}"


class User(BaseModel):
    name: str
    email: str


class FullUser(User):
    user_id: int


class UserResponse(FullUser):
    timestamp: float = Field(default_factory=time.time)


_USERS_STORAGE: tp.Dict[int, User] = {
    1: User(name="John Doe", email="john.doe@example.com"),
    2: User(name="Jane Doe", email="jane.doe@example.com"),
}


# –†–æ—É—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è


@app.get("/")
async def root() -> tp.Dict[str, tp.Union[str, float]]:
    """–ö–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è."""
    return {
        "message": "Without cache response",
        "timestamp": time.time(),
        "cache_duration": "0 seconds",
    }


@app.get(
    "/fast", dependencies=[CacheConfig(max_age=30)], openapi_extra={"x-cache-age": 30}
)
async def fast_endpoint() -> tp.Dict[str, tp.Union[str, float]]:
    """–ë—ã—Å—Ç—Ä—ã–π endpoint —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (30 —Å–µ–∫—É–Ω–¥)."""

    return {
        "message": "Fast cached response",
        "timestamp": time.time(),
        "cache_duration": "30 seconds",
    }


@app.get(
    "/slow", dependencies=[CacheConfig(max_age=300)], openapi_extra={"x-cache-age": 300}
)
async def slow_endpoint() -> tp.Dict[str, tp.Union[str, float]]:
    """–ú–µ–¥–ª–µ–Ω–Ω—ã–π endpoint —Å –¥–ª–∏–Ω–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º (5 –º–∏–Ω—É—Ç)."""
    await asyncio.sleep(0.5)

    return {
        "message": "Slow cached response",
        "timestamp": time.time(),
        "cache_duration": "300 seconds",
    }


@app.get(
    "/users/{user_id}",
    dependencies=[CacheConfig(max_age=60, key_func=custom_key_func)],
)
async def get_user(user_id: int) -> UserResponse:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –∫–ª—é—á–æ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è.

    –ö–ª—é—á –∫–µ—à–∞ –≤–∫–ª—é—á–∞–µ—Ç user-id –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.
    """
    user = _USERS_STORAGE.get(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    return UserResponse(user_id=user_id, name=user.name, email=user.email)


@app.get("/users", dependencies=[CacheConfig(max_age=30)])
async def get_users() -> tp.List[UserResponse]:
    return [
        UserResponse(user_id=user_id, name=user.name, email=user.email)
        for user_id, user in _USERS_STORAGE.items()
    ]


@app.post("/users/{user_id}", dependencies=[CacheDropConfig(paths=["/users"])])
async def create_user(user_id: int, user_data: User) -> UserResponse:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–µ—à–∞.

    –≠—Ç–æ—Ç POST –∑–∞–ø—Ä–æ—Å –∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–µ—à –¥–ª—è –≤—Å–µ—Ö /users/* –ø—É—Ç–µ–π.
    """
    _USERS_STORAGE[user_id] = user_data

    return UserResponse(user_id=user_id, name=user_data.name, email=user_data.email)


@app.put("/users/{user_id}", dependencies=[CacheDropConfig(paths=["/users"])])
async def update_user(user_id: int, user_data: User) -> UserResponse:
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–µ—à–∞."""
    user = _USERS_STORAGE.get(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    _USERS_STORAGE[user_id] = user_data

    return UserResponse(user_id=user_id, name=user_data.name, email=user_data.email)


@app.delete("/users/{user_id}", dependencies=[CacheDropConfig(paths=["/users"])])
async def delete_user(user_id: int) -> UserResponse:
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–µ—à–∞."""
    user = _USERS_STORAGE.get(user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    del _USERS_STORAGE[user_id]

    return UserResponse(user_id=user_id, name=user.name, email=user.email)


if __name__ == "__main__":
    logging.basicConfig(level=logging.DEBUG)

    print("üöÄ –ó–∞–ø—É—Å–∫ FastCacheMiddleware Basic Example...")
    print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
    print("   GET /                    - –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç (–±–µ–∑ –∫–µ—à–∞)")
    print("   GET /fast               - –∫–æ—Ä–æ—Ç–∫–∏–π –∫–µ—à (30s)")
    print("   GET /slow               - –¥–ª–∏–Ω–Ω—ã–π –∫–µ—à (5m)")
    print("   GET /users/{user_id}    - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–µ—à 3 –º–∏–Ω)")
    print("   GET /users              - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫–µ—à 3 –º–∏–Ω)")
    print("   POST /users/{user_id}   - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è /users)")
    print(
        "   PUT /users/{user_id}    - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è /users –∏ /users/*)"
    )
    print("   DELETE /users/{user_id} - —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è /users)")

    print("\nüîß –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç middleware:")
    print("   1. –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–æ—É—Ç—ã")
    print("   2. –ò–∑–≤–ª–µ–∫–∞–µ—Ç CacheConfig/CacheDropConfig –∏–∑ dependencies")
    print("   3. –ü—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–æ—É—Ç")
    print("   4. –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

    print("\nüí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   curl http://localhost:8000/users/1")
    print("   curl http://localhost:8000/users")
    print(
        '   curl -X POST http://localhost:8000/users/1 -H "Content-Type: application/json" -d \'{"name": "John", "email": "john@example.com"}\''
    )
    print(
        '   curl -X PUT http://localhost:8000/users/1 -H "Content-Type: application/json" -d \'{"name": "John Updated", "email": "john@example.com"}\''
    )
    print("   curl -X DELETE http://localhost:8000/users/1")

    uvicorn.run(app, host="127.0.0.1", port=8000)
